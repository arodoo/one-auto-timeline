<?php
/**
 * Utility functions for handling constat invitations and subscription checks
 */

/**
 * Check if user is registered
 * 
 * @param string $email Email to check
 * @return bool True if user is registered
 */
function is_user_registered($email)
{
    global $bdd;

    try {
        $stmt = $bdd->prepare("SELECT COUNT(*) FROM membres WHERE mail = ?");
        $stmt->execute([$email]);

        return (int) $stmt->fetchColumn() > 0;
    } catch (PDOException $e) {
        error_log("Error checking if user is registered: " . $e->getMessage());
        return false;
    }
}

/**
 * Check if user has a valid subscription
 * 
 * @param int $user_id User ID to check
 * @return bool True if user has active subscription
 */
function is_user_subscribed($user_id)
{
    global $bdd;

    try {
        error_log("SUBSCRIPTION CHECK: Checking subscription for user ID: $user_id");

        $stmt = $bdd->prepare("SELECT abonnement, subscription_end_date, cancel_scheduled 
                              FROM membres 
                              WHERE id = ?");
        $stmt->execute([$user_id]);

        if ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            // Log the actual values found
            error_log("SUBSCRIPTION CHECK: Found abonnement: " . ($row['abonnement'] ?? 'null') .
                ", end_date: " . ($row['subscription_end_date'] ?? 'null') .
                ", cancel_scheduled: " . ($row['cancel_scheduled'] ?? 'null'));

            // Check if subscription is active (abonnement = 'oui')
            $is_active = $row['abonnement'] === 'oui';

            // Check if not canceled
            $not_canceled = $row['cancel_scheduled'] !== 'oui';

            // Check if not expired
            $not_expired = empty($row['subscription_end_date']) ||
                strtotime($row['subscription_end_date']) > time();

            error_log("SUBSCRIPTION CHECK: Is active? " . ($is_active ? 'Yes' : 'No') .
                ", Not canceled? " . ($not_canceled ? 'Yes' : 'No') .
                ", Not expired? " . ($not_expired ? 'Yes' : 'No'));

            return $is_active && $not_canceled && $not_expired;
        } else {
            error_log("SUBSCRIPTION CHECK: No subscription record found for user ID: $user_id");
        }
    } catch (PDOException $e) {
        error_log("SUBSCRIPTION CHECK ERROR: " . $e->getMessage());
    }

    return false;
}

/**
 * Get pending constats for an agency
 * 
 * @param string $email Agency email
 * @return array List of pending constats
 */
function get_pending_agency_constats($email)
{
    global $bdd;
    $constats = [];

    try {
        // Check for constats where this email is in vehicle A agency phone field (which contains email)
        $stmt = $bdd->prepare("
            SELECT cm.*, cva.s2_agency_phone as agency_email,
                  DATE_FORMAT(cm.s1_accident_date, '%d/%m/%Y') as formatted_date,
                  m.prenom, m.nom
            FROM constats_main cm
            JOIN constats_vehicle_a cva ON cm.unique_id = cva.constat_id
            JOIN membres m ON cm.id_membre = m.id
            WHERE cva.s2_agency_phone = ?
        ");
        $stmt->execute([$email]);
        $constats = array_merge($constats, $stmt->fetchAll(PDO::FETCH_ASSOC));

        // Also check for constats where email is in vehicle B agency phone field
        $stmt = $bdd->prepare("
            SELECT cm.*, cvb.s3_agency_phone as agency_email,
                  DATE_FORMAT(cm.s1_accident_date, '%d/%m/%Y') as formatted_date,
                  m.prenom, m.nom 
            FROM constats_main cm
            JOIN constats_vehicle_b cvb ON cm.unique_id = cvb.constat_id
            JOIN membres m ON cm.id_membre = m.id
            WHERE cvb.s3_agency_phone = ?
        ");
        $stmt->execute([$email]);
        $constats = array_merge($constats, $stmt->fetchAll(PDO::FETCH_ASSOC));

        return $constats;
    } catch (PDOException $e) {
        error_log("Error getting pending agency constats: " . $e->getMessage());
        return [];
    }
}

/**
 * Create an invitation for an agency
 * 
 * @param string $email Agency email
 * @param int $constatId Constat ID
 * @param string $role Role ('a' or 'b')
 * @param int $inviterId ID of user who invited
 * @return string|bool Token if successful, false on failure
 */
function create_invitation($email, $constatId, $role, $inviterId)
{
    global $bdd;

    try {
        // Generate a unique token
        $token = bin2hex(random_bytes(16));

        // Set expiration date to 7 days from now
        $expiryDate = date('Y-m-d H:i:s', strtotime('+7 days'));

        $stmt = $bdd->prepare("
            INSERT INTO invitations 
            (email, constat_id, token, status, created_at, expired_at) 
            VALUES (?, ?, ?, 'pending', NOW(), ?)
        ");

        $stmt->execute([$email, $constatId, $token, $expiryDate]);
        return $token;
    } catch (PDOException $e) {
        error_log("Error creating invitation: " . $e->getMessage());
        return false;
    }
}

/**
 * Send invitation email to agency
 * 
 * @param string $email Recipient email
 * @param string $token Invitation token
 * @param int $constatId Constat ID
 * @return bool True if sent successfully
 */
function send_invitation_email($email, $token, $constatId)
{
    global $nomsiteweb, $emaildefault, $http;

    // Use the correct URL format that matches the .htaccess routing rules
    // Changed from /register?token= to /Inscription?token=
    $invitationLink = $http . $nomsiteweb . "/Inscription?token=" . $token;

    $subject = "Invitation à accéder à un constat d'accident";

    // Use template from includes/templates/invitation_email.php
    ob_start();
    include(dirname(__DIR__) . '/templates/invitation_email.php');
    $message = ob_get_clean();

    // Use mailsend function if available, otherwise use mail()
    if (function_exists('mailsend')) {
        return mailsend(
            $email,
            "Agence d'assurance",
            $emaildefault,
            $nomsiteweb,
            $subject,
            $message
        );
    } else {
        $headers = "MIME-Version: 1.0" . "\r\n";
        $headers .= "Content-type: text/html; charset=UTF-8" . "\r\n";
        $headers .= "From: $nomsiteweb <$emaildefault>" . "\r\n";

        return mail($email, $subject, $message, $headers);
    }
}

/**
 * Check if user has any pending invitations
 * 
 * @param string $email User email
 * @return bool True if has pending invitations
 */
function has_pending_invitations($email)
{
    global $bdd;

    try {
        $stmt = $bdd->prepare("
            SELECT COUNT(*) FROM invitations 
            WHERE email = ? AND status = 'pending' AND expired_at > NOW()
        ");
        $stmt->execute([$email]);

        return (int) $stmt->fetchColumn() > 0;
    } catch (PDOException $e) {
        error_log("Error checking pending invitations: " . $e->getMessage());
        return false;
    }
}

/**
 * Generate an appropriate banner message based on user status
 * 
 * @param int $user_id User ID
 * @param string $user_email User email
 * @return array Banner data including message and visibility flag
 */
function get_banner_message($user_id, $user_email)
{
    $hasConstats = count(get_pending_agency_constats($user_email)) > 0;
    $isSubscribed = is_user_subscribed($user_id);

    $result = [
        'show' => false,
        'message' => '',
        'type' => 'info',
        'button_text' => '',
        'button_url' => ''
    ];

    if ($hasConstats && !$isSubscribed) {
        $result['show'] = true;
        $result['message'] = "Vous avez des constats d'accident disponibles. Abonnez-vous pour y accéder et gérer les déclarations de vos clients.";
        $result['type'] = 'warning';
        $result['button_text'] = "S'abonner";
        $result['button_url'] = "/Abonnement";
    }

    return $result;
}

/**
 * Render the subscription banner
 * 
 * @param array $data Banner data
 * @return string HTML for the banner
 */
function render_subscription_banner($data)
{
    // Generate a unique ID for the banner to use with JavaScript
    $bannerId = 'subscription-banner-' . uniqid();

    ob_start();
    ?>
    <div id="<?php echo $bannerId; ?>" class="alert subscription-banner" role="alert"
        style="position: absolute; top: 70px; left: 0; right: 0; z-index: 1050; margin: 0 auto; max-width: 1200px; width: 90%; padding: 15px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); display: flex; justify-content: space-between; align-items: center; background-color: #dc3545; color: white;">
        <div style="flex: 1;">
            <strong><i class="fa fa-exclamation-circle"></i> Action requise :</strong> <?php echo $data['message']; ?>
        </div>
        <?php if (!empty($data['button_text']) && !empty($data['button_url'])): ?>
            <div style="margin: 0 20px;">
                <a href="<?php echo $data['button_url']; ?>" class="btn"
                    style="color: #dc3545; background-color: white; border-color: white; font-weight: 600; text-decoration: none;">
                    <?php echo $data['button_text']; ?> <i class="fa fa-arrow-right"></i>
                </a>
            </div>
        <?php endif; ?>
        <button type="button" class="close" aria-label="Close"
            onclick="document.getElementById('<?php echo $bannerId; ?>').style.display='none'; sessionStorage.setItem('bannerDismissed', 'true');"
            style="background: none; border: none; font-size: 1.5rem; font-weight: 700; color: white; cursor: pointer; padding: 0 10px;">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <script>
        // Only show the banner if it hasn't been dismissed in this session
        document.addEventListener('DOMContentLoaded', function () {
            if (sessionStorage.getItem('bannerDismissed') === 'true') {
                document.getElementById('<?php echo $bannerId; ?>').style.display = 'none';
            }
        });
    </script>
    <?php
    return ob_get_clean();
}
?>